name: Generate Infrastructure Diagram

on:
  push:
    branches:
      - main

jobs:
  generate-diagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the main repository
        uses: actions/checkout@v3

      - name: Checkout the Terraform repository
        uses: actions/checkout@v3
        with:
          repository: UPT-FAING-EPIS/proyecto-si885-2024-ii-u2-tg01apazachuracutcutiescohuallpas
          path: infra
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          python -m pip install --upgrade pip
          pip install diagrams python-hcl2
          
      - name: Verificar contenido del repositorio
        run: |
          echo "Contenido del repositorio:"
          ls -R
          
      - name: Generate Diagram from Terraform Files
        run: |
          echo '
          import os
          import hcl2
          from diagrams import Diagram, Cluster, Edge
          from diagrams.aws.compute import EC2
          from diagrams.aws.database import RDS
          from diagrams.aws.network import VPC
          
          # Diccionario para mantener referencia de recursos
          resources = {}
          
          def create_or_get_resource(resource_type, name, resource_class):
              key = f"{resource_type}_{name}"
              if key not in resources:
                  resources[key] = resource_class(name)
              return resources[key]
          
          def process_terraform_files():
              terraform_dir = "infra/infra"
              print(f"Recorriendo los archivos Terraform en {terraform_dir}...")
              for root, _, files in os.walk(terraform_dir):
                  for file in files:
                      if file.endswith(".tf"):
                          print(f"Procesando archivo: {file}")
                          file_path = os.path.join(root, file)
                          with open(file_path, "r") as f:
                              try:
                                  terraform_data = hcl2.load(f)
                                  process_resources(terraform_data)
                              except Exception as e:
                                  print(f"Error al procesar {file}: {e}")
          
          def process_resources(terraform_data):
              if "resource" not in terraform_data:
                  return
              
              for resource in terraform_data["resource"]:
                  for resource_type, instances in resource.items():
                      for instance_name, _ in instances.items():
                          print(f"Recurso encontrado: {resource_type} - {instance_name}")
          
          if __name__ == "__main__":
              process_terraform_files()
          ' > generate_diagram.py
          python generate_diagram.py

      - name: Check if diagram was created
        run: |
          if [ -f "infra_diagram.png" ]; then
            echo "Diagrama generado exitosamente."
          else
            echo "Error: El archivo infra_diagram.png no fue generado."
            exit 1
          fi

      - name: Commit and Push Diagram
        run: |
          git config --local user.name "JesusHuallpa"
          git config --local user.email "jh2021071085@virtual.upt.pe"
          
          if [ -f "infra_diagram.png" ]; then
              git checkout -b diagramaTF || git checkout diagramaTF
              git add infra_diagram.png
              git commit -m "Actualizar diagrama de infraestructura [skip ci]" || echo "No hay cambios para commit"
              git push origin diagramaTF --force
          else
              echo "Error: infra_diagram.png no se gener√≥."
              exit 1
          fi
      - name: Upload Diagram as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: infra_diagram
          path: infra_diagram.png
