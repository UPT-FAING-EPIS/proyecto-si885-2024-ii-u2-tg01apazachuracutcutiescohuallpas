name: Generate Infrastructure Diagram

on:
  push:
    branches:
      - main

jobs:
  generate-diagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          python -m pip install --upgrade pip
          pip install diagrams python-hcl2

      - name: Verificar archivos Terraform
        run: |
          echo "Verificando los archivos Terraform..."
          cd infra  # Navegar al directorio correcto
          if [ -d "." ]; then  # Verifica si existe el directorio actual
            echo "Archivos Terraform encontrados en infra:"
            find . -name "*.tf"  # Buscar archivos .tf en el directorio actual
          else
            echo "Error: El directorio 'infra' no existe."
            exit 1
          fi
      
      - name: Crear archivo Python temporal con el código
        run: |
          cat << EOF > generate_diagram.py
          import os
          import hcl2
          from diagrams import Diagram, Cluster
          from diagrams.aws.compute import EC2
          from diagrams.aws.database import RDS
          from diagrams.aws.network import VPC
          
          resources = {}
          resource_classes = {
              "aws_instance": EC2,
              "aws_db_instance": RDS,
              "aws_vpc": VPC
          }
          
          def create_or_get_resource(resource_type, name):
              key = f"{resource_type}_{name}"
              if key not in resources:
                  resource_class = resource_classes.get(resource_type, EC2)
                  resources[key] = resource_class(name)
              return resources[key]
          
          def process_terraform_files(terraform_dir):
              for root, _, files in os.walk(terraform_dir):
                  for file in files:
                      if file.endswith(".tf"):
                          file_path = os.path.join(root, file)
                          print(f"Procesando archivo Terraform: {file_path}")
                          with open(file_path, "r") as f:
                              try:
                                  terraform_data = hcl2.load(f)
                                  print(f"Datos de {file_path}: {terraform_data}")
                                  process_resources(terraform_data)
                              except Exception as e:
                                  print(f"Error al procesar {file}: {e}")
          
          def process_resources(terraform_data):
              if "resource" not in terraform_data:
                  print("No se encontraron recursos en el archivo Terraform.")
                  return
              for resource in terraform_data["resource"]:
                  for resource_type, instances in resource.items():
                      if resource_type not in resource_classes:
                          print(f"Tipo de recurso no soportado: {resource_type}")
                          continue
                      for instance_name, resource_details in instances.items():
                          print(f"Creando recurso: {instance_name}")
                          create_or_get_resource(resource_type, instance_name)
                          # Si deseas incluir más detalles como "instance_class" o "allocated_storage"
                          if resource_type == "aws_db_instance":
                              if "instance_class" in resource_details:
                                  print(f"Clase de instancia: {resource_details['instance_class']}")
                              if "allocated_storage" in resource_details:
                                  print(f"Almacenamiento asignado: {resource_details['allocated_storage']}")
                              # Aquí podrías agregar relaciones si quieres conectarlos visualmente
          
          def generate_diagram():
              with Diagram("Infraestructura", show=False, outformat="png", filename="infra_diagram"):
                  with Cluster("VPC"):
                      for key, node in resources.items():
                          if "aws_instance" in key:
                              ec2_instance = node
                              for other_key, other_node in resources.items():
                                  if "aws_db_instance" in other_key:
                                      ec2_instance >> other_node
          
          if __name__ == "__main__":
              terraform_dir = "infra"  # Asegúrate de que sea la ruta correcta a tus archivos Terraform
              process_terraform_files(terraform_dir)
              generate_diagram()

          EOF
      
      - name: Ejecutar script Python para generar diagrama
        run: |
          python generate_diagram.py
          echo "Diagrama generado con éxito."


      - name: Commit and Push Diagram
        run: |
          git config --local user.name "JesusHuallpa"
          git config --local user.email "jh2021071085@virtual.upt.pe"
          
          if [ -f "infra_diagram.png" ]; then
              git checkout diagramaTF || git checkout -b diagramaTF
              git add infra_diagram.png
              git commit -m "Actualizar diagrama de infraestructura [skip ci]" || echo "No hay cambios para commit"
              git push origin diagramaTF --force
          else
              echo "Error: infra_diagram.png no se generó."
              exit 1
          fi

      - name: Upload Diagram as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: infra_diagram
          path: infra_diagram.png
